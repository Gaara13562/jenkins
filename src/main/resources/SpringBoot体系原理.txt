第十四章节讲解了SpringBoot的体系原理。Spring Starter模式的提出，让模块开发更加独立化，相互间依赖更松散，集成更方便。
1.	SpringApplication启动
	1.1	SpringContext创建
		核心代码：
			org.springframework.boot.SpringApplication.createApplicationContext()
	1.2	准备context
		核心代码：
			org.springframework.boot.SpringApplication.prepareContext(ConfigurableApplicationContext, ConfigurableEnvironment, SpringApplicationRunListeners, ApplicationArguments, Banner)
		其中最重要的就是启动类的加载，代码如下：
			org.springframework.boot.SpringApplication.load(ApplicationContext, Object[])
		这里就相当于获取了 BeanDefinition
	1.3	Spring属性拓展
		核心代码：
			org.springframework.boot.SpringApplication.refreshContext(ConfigurableApplicationContext)
		其本质则是调用函数
			org.springframework.context.support.AbstractApplicationContext.refresh()
		这也就是之前Spring进行bean加载的核心函数，在这里将SpringBoot与Spring结合起来了。

2.	Starter自动配置原理
	2.1	spring.factories文件读取以及配置类的加载
		Starter能启动的重要原因就是注解 @SpringBootApplication，进一步是该注解下的 @EnableAutoConfiguration，该注解下引入了类
		@Import(AutoConfigurationImportSelector.class)，该类中的函数
			org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.selectImports(AnnotationMetadata)
		实现了Starter的自动配置，其中函数
			org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.getCandidateConfigurations(AnnotationMetadata, AnnotationAttributes)
		实现了相关配置类的加载，具体加载的核心函数
			org.springframework.core.io.support.SpringFactoriesLoader.loadSpringFactories(ClassLoader)
		其中是通过加载 META-INF/spring.factories 文件来实现具体类的加载。由此可见，Starter的自动配置其实是通过读取 META-INF/spring.factories
		文件中的配置信息，进而实现类的自动加载。不难想象，其他的Starter 诸如 mybatis-spring-boot-starter 等必然也有对应的文件，
		这一步是在 refresh() 函数中的 invokeBeanFactoryPostProcessors() 中完成的。
	2.2	配置类的解析
		核心代码：
			org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClass, SourceClass, Collection<SourceClass>, boolean)
		该函数进一步调用函数
			org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClass)
		来完成配置类的解析，该函数中第一行首先判断解析类是否满足条件，这里使用了Spring的Conditional机制，即只有满足一定条件才会解析，否则不会解析；
		具体的解析过程在函数
			org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClass, SourceClass)
		中完成。该函数中完成了 @PropertySource / @ComponentScan / @Import / @Bean 等注解的解析。
	== 小结 ==>> 通过上述两个步骤可以发现，SpringBoot通过spring.factories实现类的加载，然后进行类的解析，进而实现对注解的解析，从而达到完全基于注解的开发。

3.	Conditional实现机制
	首先说明Conditional逻辑生效的切入点
	即上述配置类解析过程的 processConfigurationClass() 函数中第一行会进行解析类的条件判断，代码如下：
		org.springframework.context.annotation.ConditionEvaluator.shouldSkip(AnnotatedTypeMetadata, ConfigurationPhase)
	在该代码中首先获取condition，然后进行condition的匹配，只要有一个未匹配则直接返回；只有全部匹配的类才会继续解析；匹配函数：
		org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(ConditionContext, AnnotatedTypeMetadata)
	进一步调用函数
		org.springframework.boot.autoconfigure.condition.OnClassCondition.getMatchOutcome(ConditionContext, AnnotatedTypeMetadata)
	匹配的判断也不复杂，但是种类繁多，有类判断（如后面的tomcat内嵌服务器就是通过判断类是否存在）、属性判断（判断是否满足对应的属性值）等多种情况。

4.	Tomcat集成
	项目启动的时候会发现如下提示：
		【o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)】
	初始化Tomcat服务器，核心类 org.springframework.boot.web.embedded.tomcat.TomcatWebServer
	通过查找方法的调用关系可知在函数
		org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh()
	创建了WebServer，具体的创建函数
		org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer()
	创建完成之后接下来在函数
		org.springframework.context.support.AbstractApplicationContext.finishRefresh()
	完成服务器的启动，核心代码
		org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start()
	至此就完成了tomcat服务器的初始化与启动，实现了SpringBoot与Tomcat服务器的集成。
	而之所以是使用Tomcat服务器，则在于类
		org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration.EmbeddedTomcat
	上面的配置
		@Configuration
		@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })
		@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)
	只要满足这几个条件就会自动加载 EmbeddedTomcat 类，进而实现 TomcatWebServer 的初始化。

=========================遗留问题：SpringBoot仍然只是一个大概的了解，没有Spring那么详细，未来有机会还需要加强学习!!!=======================